Todo:
    - Start developing operations
        - STORE
        - LOAD
        - REMOVEE
    - Make ControllerServerConnection be able to detect the type of connector when it disconnects
        - Add a method to Controller called getConnectorType that takes in the port number of the connector and 
        returns the ConnectorType for the connector (make an enumeration class for it).
        - To work out the connector type, will need to :
            - Store the ControllerServerConnection in the Controller in an arraylist after a Client request is made 
            (know the connector is a client).
            - Search through Controller's list of Clients looking for a matched port number.
            - If no match found, the connector must an unidentified Client, or a Dstore that has not yet joined, or just
            unidentified.
    - Timeouts on DStore and controller
        - How to handle timeouts on waiting for client request (dont want to disconect from client too soon)??

General Notes:
    - At Controller initialisation, create a thread that handles rebalancing - have it on a seperate thread basically
    - Make sure that when handling requests, at the end of the pattern matching for expectd token types, but an else for if the
    request was tokenized, but is not an expected token (e.g., LOAD send to Dstore).

Possible errors:
    - Not using the same port for a Dstore throughout it's life - this means that the messages sent to a Dstore will be on a different
    port to the one it initially joined on 
        - this may cause errors with the automated testing
        - can get around this by making the dstore send the initial request on it's server port or by manually passing in the original
        port number of the datastore whenever logging messages (would need to store it in a map also).
            - would also need to create the new socket whenever logging was done.
    - **FIXED** :If a Client or DStore cannot connect to the controller when they are created, they still carry on.
        - The process should stop if they can't connect to the controller as there is nothing they can do in this case.
        - **FIX** : Have made it so if they cant connect, they close. This was done by moving the startListening and waitForInput methods 
        into the try statement, so that if an exception is thrown (cant connect to controller), the objects do not start doing anything,
        and so execution stops
            - Essentially - added the setup and start stuff to a different method, and then only start listening for connections or user
            input if the setup is successful because the startListening/waitForInput methods are inside the "try" statements, and so won't 
            be called if an exception is thrown.
    - Currently, the system assumes the connection with the client will persist until they close it - should it be the case instead
    that a client is started for each request - i.e., should the ControllerClient channel remain open to handle further requests from the
    client, or will these further requests come from a different connection?

Error Handling:
    - Tokenizing:
        - Request contains extra stuff after tokens
        - Request parameters are not of the correct structure 
            - filenames do not have '.<extension>'
            - provided folders for DStores are not of the correct
    - Controller:
        - Recieved connection is from neither a DStore or Client
    - DStore:
        - Main method - command line parameters are not of the correct form
        - When multiple Dstores join on the same port number
    - General:
        - Invalid responses for any request (i.e., tokenized to invalid request)
    

Tokens:
    - Store Operation:
        - STORE filename filesize
        - STORE_TO port1 port2 ... portR
        - ACK
        - STORE_ACK
        - STORE_COMPLETE
        - Error Handling:
            - ERROR_NOT_ENOUGH_DSTORES
            - ERROR_FILE_ALREADY_EXISTS

    - Load Operation:
        - LOAD filename
        - LOAD_FROM port filesize
        - LOAD_DATA filename
        - RELOAD filename
        - Error Handling:
            - ERROR_NOT_ENOUGH_DSTORES 
            - ERROR_FILE_DOES_NOT_EXIST
            - ERROR_LOAD
        
    - Remove Operation:
        - REMOVE filename
        - REMOVE_ACK filename
        - REMOVE_COMPLETE
        - Error Handling
            - ERROR_NOT_ENOUGH_DSTORES 
            - ERROR_FILE_DOES_NOT_EXIST
            - ERROR_FILE_DOES_NOT_EXIST filename
    
    - List Operaton:
        - LIST 
        - LIST file_list
        - ERROR_HANDLING:
            - ERROR_NOT_ENOUGH_DSTORES 

    - Storage Rebalance:
        - JOIN port
        - LIST
        - LIST file_list
        - REBALANCE files_to_send files_to_remove
        - REBALANCE_STORE filename filesize
        - ACK
        - REBALANCE_COMPLETE